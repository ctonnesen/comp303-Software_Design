{"diagram":"ObjectDiagram","nodes":[{"x":0,"name":"songs","y":0,"id":40,"type":"FieldNode","value":"HashMap<path(String), Song>"},{"x":0,"name":"addSong(Song  song))","y":0,"id":33,"type":"FieldNode","value":"void"},{"x":1130,"name":"This is going to call checkSuffix() and checkFilePath() to check if the path is valid","y":220,"id":0,"type":"NoteNode"},{"x":640,"name":"checkValidPath()","y":-150,"id":12,"type":"FieldNode","value":"boolean"},{"x":20,"name":"addSong()","y":-50,"id":54,"type":"FieldNode","value":"void"},{"x":360,"name":"path","y":-10,"id":25,"type":"FieldNode","value":""},{"x":1030,"name":"Composer","y":400,"id":1,"type":"ObjectNode"},{"x":-10,"name":"changeName()","y":-10,"id":60,"type":"FieldNode","value":"void"},{"x":1050,"name":"Genre","y":570,"id":2,"type":"ObjectNode"},{"x":20,"name":"Aaron:\nSkeletal code\nDiagram work","y":70,"id":3,"type":"NoteNode"},{"x":50,"name":"optionalTags","y":-40,"id":27,"type":"FieldNode","value":""},{"x":-100,"name":"BPM","y":240,"id":19,"type":"FieldNode","value":""},{"x":0,"name":"removeSongs()","y":20,"id":58,"type":"FieldNode","value":"void"},{"x":0,"name":"addAlbum(Album album)","y":0,"id":36,"type":"FieldNode","value":"void"},{"x":30,"name":"In Library, the ordering of Songs, PlayList, and Albums should not matter, and HashSet should accerlerate the extraction of Songs","y":0,"id":4,"type":"NoteNode"},{"x":0,"name":"removeAlbum(String  AlbumName)","y":0,"id":35,"type":"FieldNode","value":"value"},{"x":0,"name":"albums","y":0,"id":39,"type":"FieldNode","value":"HashMap<Integer, Album>"},{"x":0,"name":"modifySong(path)","y":0,"id":42,"type":"FieldNode","value":""},{"x":-10,"name":"getName()","y":-10,"id":59,"type":"FieldNode","value":"String"},{"x":1050,"name":"Comments on skeletal code:\nUse libraries when possible (e.g. for Time, filePath)\nMake a copy of object to store in hashmap\nConsider generic type for tagvalue\nCreate classes when possible instead of primitive types","y":300,"id":5,"type":"NoteNode"},{"x":520,"name":"getNumberOfSongs()","y":-30,"id":56,"type":"FieldNode","value":"int"},{"x":270,"name":"songs","y":-150,"id":57,"type":"FieldNode","value":"ArrayList<Song>"},{"x":1030,"name":"BPM","y":480,"id":6,"type":"ObjectNode"},{"x":-430,"name":"aTagValue","y":-560,"id":45,"type":"FieldNode","value":"value"},{"x":120,"name":"Ingrid:\nLibrary","y":140,"id":7,"type":"NoteNode"},{"x":300,"name":"Harsh:\nFilepath/ext/etc.\nInvalid songs\nCustomTag (and other metadata updates)\nSong","y":80,"id":8,"type":"NoteNode"},{"x":0,"name":"addPlayList(Playlist playlist)","y":0,"id":34,"type":"FieldNode","value":"void"},{"x":-100,"name":"Composer","y":240,"id":18,"type":"FieldNode","value":""},{"children":[10,11,12,13],"x":1140,"name":"Path","y":10,"id":9,"type":"ObjectNode"},{"x":30,"name":"addNewSong(Song song))","y":60,"id":48,"type":"FieldNode","value":"void"},{"x":640,"name":"checkFilePath()","y":-150,"id":11,"type":"FieldNode","value":"boolean"},{"x":50,"name":"customTags","y":-40,"id":26,"type":"FieldNode","value":""},{"x":230,"name":"getTotalPlayingTime","y":-110,"id":53,"type":"FieldNode","value":"int"},{"x":960,"name":"The artist name should be updated every time we add a Song into the album. ","y":700,"id":14,"type":"NoteNode"},{"x":360,"name":"aArtist","y":-10,"id":28,"type":"FieldNode","value":"value"},{"x":640,"name":"checkSuffix()","y":-150,"id":10,"type":"FieldNode","value":"boolean"},{"x":120,"name":"Kelly:\nPlaylist","y":80,"id":15,"type":"NoteNode"},{"x":-50,"name":"artistNames","y":40,"id":47,"type":"FieldNode","value":"String[]"},{"x":0,"name":"removeSong(String songName)","y":0,"id":38,"type":"FieldNode","value":"void"},{"x":-40,"name":"getAllSongs()","y":-160,"id":55,"type":"FieldNode","value":"ArrayList<Songs>"},{"x":10,"name":"Jia:\nAlbum\nTracking number","y":140,"id":16,"type":"NoteNode"},{"children":[18,19,20],"x":870,"name":"OptionalTag (enum)","y":370,"id":17,"type":"ObjectNode"},{"x":-50,"name":"content","y":40,"id":50,"type":"FieldNode","value":"HashMap<trackNumber, Song>"},{"x":140,"name":"The Integers are IDs for Album and Playlist in my mind.","y":660,"id":21,"type":"NoteNode"},{"x":190,"name":"Vincent:\nAlbum\nTracking number\nLibrary","y":80,"id":22,"type":"NoteNode"},{"x":1150,"name":"General comments:\nPut comments in code\nMake small MRs\nRebase","y":430,"id":23,"type":"NoteNode"},{"children":[25,26,27,28,29,30],"x":550,"name":"Song","y":60,"id":24,"type":"ObjectNode"},{"children":[47,48,49,50],"x":510,"name":"Album","y":670,"id":46,"type":"ObjectNode"},{"x":1000,"name":"CustomTag","y":140,"id":31,"type":"ObjectNode"},{"children":[33,34,35,36,37,38,39,40,41,42],"x":50,"name":"Library","y":230,"id":32,"type":"ObjectNode"},{"x":0,"name":"removePlaylist(String playlistName)","y":0,"id":37,"type":"FieldNode","value":"void"},{"x":960,"name":"We should be able to associate Song with Album. Pass in Song as input, check if the Song exists in the library first, if so add it to the album","y":800,"id":43,"type":"NoteNode"},{"x":0,"name":"playlists","y":0,"id":41,"type":"FieldNode","value":"HashMap<Integer, Playlist>"},{"children":[45],"x":790,"name":"TagValue","y":10,"id":44,"type":"ObjectNode"},{"x":0,"name":"aFilePath","y":0,"id":13,"type":"FieldNode","value":"value"},{"x":40,"name":"aTime","y":-30,"id":29,"type":"FieldNode","value":"value"},{"children":[52,53,54,55,56,57,58,59,60],"x":520,"name":"Playlist","y":320,"id":51,"type":"ObjectNode"},{"x":-100,"name":"Genre","y":240,"id":20,"type":"FieldNode","value":""},{"x":-40,"name":"name","y":-160,"id":52,"type":"FieldNode","value":"String"},{"x":40,"name":"aTitle","y":-30,"id":30,"type":"FieldNode","value":"value"},{"x":-50,"name":"removeSong(String  songName)","y":40,"id":49,"type":"FieldNode","value":"void"}],"edges":[{"start":25,"end":9,"type":"ObjectReferenceEdge"},{"start":12,"end":0,"type":"NoteEdge"},{"start":40,"end":24,"type":"ObjectReferenceEdge"},{"start":57,"end":24,"type":"ObjectReferenceEdge"},{"start":41,"end":51,"type":"ObjectReferenceEdge"},{"start":50,"end":24,"type":"ObjectReferenceEdge"},{"start":47,"end":14,"type":"NoteEdge"},{"start":48,"end":43,"type":"NoteEdge"},{"start":39,"end":46,"type":"ObjectReferenceEdge"},{"start":26,"end":31,"type":"ObjectReferenceEdge"},{"start":27,"end":17,"type":"ObjectReferenceEdge"},{"start":27,"end":44,"type":"ObjectReferenceEdge"},{"start":26,"end":44,"type":"ObjectReferenceEdge"},{"start":18,"end":1,"type":"ObjectReferenceEdge"},{"start":19,"end":6,"type":"ObjectReferenceEdge"},{"start":20,"end":2,"type":"ObjectReferenceEdge"}],"version":"3.0.2"}


updated UML based on mater branch
{"diagram":"ClassDiagram","nodes":[{"methods":"hasNext() : boolean\nnext() : song","x":990,"name":"Music_iterator","y":430,"attributes":"","id":10,"type":"ClassNode"},{"methods":"getTitle() : string\nsetTitle(String)\ngetContents()\niterator()","x":960,"name":"AudioList","y":60,"id":2,"type":"InterfaceNode"},{"methods":"getContents()","x":940,"name":"Album","y":240,"attributes":"maxTrackNumber  = int","id":3,"type":"ClassNode"},{"methods":"iterator() : Iterator<Song>\nget_all_Albums() : Iterator<AudioList>\nget_all_PlayLists() : Iterator<AudioList>\n","x":610,"name":"Library","y":220,"attributes":"aAlbums = HashMap<Integer, Album> \nAlbums = ArrayList<Album>\naPlaylists = HashMap<Integer, Playlist> ","id":9,"type":"ClassNode"},{"methods":"hasNext() : boolean\nnext() : song","x":220,"name":"SongIterator<Song>","y":570,"attributes":"ourList = ArrayList<Song> \nindex = int\nsize = int","id":0,"type":"ClassNode"},{"methods":"","x":660,"name":"Iterator<AudioList>","y":440,"id":8,"type":"InterfaceNode"},{"methods":"hasNext() : boolean\nnext() : song","x":230,"name":"Iterator<Song>","y":150,"attributes":"index = int\nTheSongs = ArrayList<code.Song>","id":5,"type":"ClassNode"},{"methods":"hasNext() : boolean\nnext() : song","x":440,"name":"Music_iterator","y":580,"attributes":"index = int\nAudioArray = ArrayList<AudioList>","id":7,"type":"ClassNode"},{"methods":"hasNext() : boolean\nnext() : song","x":50,"name":"the_iterator","y":610,"attributes":"","id":6,"type":"ClassNode"},{"methods":"getContents() : arraylist","x":1250,"name":"Playlist","y":60,"attributes":"aName = String\naSongList = ArrayList<Song> \naTotalPlayingTime = int","id":1,"type":"ClassNode"},{"methods":"Iterator<Song>","x":580,"name":"Iterable<Song>","y":60,"id":4,"type":"InterfaceNode"}],"edges":[{"middleLabel":"","start":10,"directionality":"Unidirectional","end":8,"type":"DependencyEdge"},{"Generalization Type":"Inheritance","start":3,"end":2,"type":"GeneralizationEdge"},{"middleLabel":"","start":2,"directionality":"Unidirectional","end":4,"type":"DependencyEdge"},{"Generalization Type":"Inheritance","start":1,"end":2,"type":"GeneralizationEdge"},{"middleLabel":"","start":9,"directionality":"Unidirectional","end":4,"type":"DependencyEdge"},{"middleLabel":"","start":6,"directionality":"Unidirectional","end":5,"type":"DependencyEdge"},{"middleLabel":"","start":0,"directionality":"Unidirectional","end":5,"type":"DependencyEdge"},{"middleLabel":"","start":7,"directionality":"Unidirectional","end":5,"type":"DependencyEdge"},{"middleLabel":"","start":4,"directionality":"Unidirectional","end":5,"type":"DependencyEdge"},{"startLabel":"","middleLabel":"","start":8,"directionality":"Unspecified","end":9,"endLabel":"","type":"AssociationEdge"}],"version":"3.0.1"}
