{"diagram":"ClassDiagram","nodes":[{"methods":"int compare(Object obj1, Object obj2)","x":310,"name":"Comparator<Song>","y":600,"id":0,"type":"InterfaceNode"},{"methods":"","x":1830,"name":"Iterable<Song>","y":680,"id":1,"type":"InterfaceNode"},{"methods":"int getNumberOfSongs()\nvoid updateTotalPlayingTime()\nint getTotalPlayingTime()","x":1920,"name":"Playlists","y":370,"attributes":"- String aName\n- ArrayList<Song> aSongList \n- int aTotalPlayingTime;\n- int aNumberSongs","id":2,"type":"ClassNode"},{"methods":"","x":340,"name":"ByNameComparator","y":770,"attributes":"","id":3,"type":"ClassNode"},{"methods":"String getFilePath()\nsetCustomTag(String pTagName, String pTagValue)\nsetTitle(String pTitle)\nsetArtist(String pArtist)\nString getTagType(String NameTag)\nvoid setBPM(String pBPM)\nvoid setComposer(String pComposer)\nvoid setGenre(String pGenre)\ngetCustomTag(String pTagName)\nString getBPM()\nString getComposer()\nString getGenre()\nString getTitle()\nString getArtist()\nString getTime()\nboolean isValidSong()\nboolean isValidCreate(String pFilePath)\nboolean isValidExtension(String pFilePath)\nString toString()\nString printSongInOneLine()","x":800,"name":"Song","y":410,"attributes":"- private final String aFilePath;\n- private String aTitle;\n- private String aArtist;\n- private String aTime;\n- private final  HashMap<String, String> aCustomTags","id":4,"type":"ClassNode"},{"methods":"boolean hasNext()\nSong next()","x":1800,"name":"the_iterator","y":980,"attributes":"- final Queue<Object> songsQueue","id":5,"type":"ClassNode"},{"methods":"String getTitle()\nvoid setTitle(String input)\nabstract ArrayList<Song> getContents()\nIterator<Song> iterator()","x":1780,"name":"AudioList","y":790,"attributes":"- String title","id":6,"type":"ClassNode"},{"methods":"getArtistName()\nchangeAlbumArtist(String newArtist)\ntoString()","x":1090,"name":"Album","y":60,"attributes":"- String aTitle\n- String aAlbumArtistName\n- HashMap<Integer, Song> aContentInHashMap\n- int maxTrackNumber","id":7,"type":"ClassNode"},{"methods":"","x":910,"name":"OptionalTag","y":920,"attributes":"- COMPOSER\n- GENRE\n- BPM","id":8,"type":"ClassNode"},{"methods":"","x":80,"name":"MultiComparator<Song>","y":770,"attributes":"final List<Comparator<Song>> comparators;","id":9,"type":"ClassNode"},{"methods":"","x":630,"name":"ByArtistComparator","y":770,"attributes":"","id":10,"type":"ClassNode"},{"methods":"","x":2010,"name":"Iterator<Song>","y":840,"id":11,"type":"InterfaceNode"},{"methods":"void play();\n","x":890,"name":"Playable","y":30,"id":12,"type":"InterfaceNode"},{"methods":"Long createIDPlaylist()\nLong createIDAlbum()\naddSong(Song song)\naddAlbum(Album Album)\naddPlayList(Playlist playlist)\nremoveSong(String pFilePath)\nremovePlayList(int pPlaylistID)\nremoveAlbum(int pAlbumID)\nArrayList<Song> getAllSongs()\nHashMap<String, Album> getAllSongsReferenceable()\nHashMap<Integer, Album> getAllAlbums()\nHashMap<Integer, Album> getAllPlaylists()\nPlaylist PlaylistAllByArtist(String pArtist)\nPlaylist PlaylistByGenre(String pGenre)\nplayPlaylist(int pPlaylistID)\nplaySong(String filePath)\nplayAlbum(int pAlbumID)\nArrayList<String> importSongsToLib(String dirpath)\nString secondsToMinutes(int sec, int minuteToSecond)\nprintLibSongs(boolean ifdetailed, ArrayList<String> songKeys)\nIterator<Song> iterator()\nupdateLib()\nArrayList<String> getSortedSongKeysBySongName()\nArrayList<String> getSortedSongKeysBySongLength()\nArrayList<String> getSortedSongKeysBySongArtist()\nArrayList<String> sort(String[] userSortFields)\nvoid filterByTag(String tagName, String filter)","x":1140,"name":"Library","y":510,"attributes":"- final HashMap<Integer, Album> aAlbums\n- final HashMap<Integer, Playlist> aPlaylists\n- final HashMap<String, Song> aSongs \n- final AtomicLong idCounterPlaylist\n- final AtomicLong idCounterAlbum","id":13,"type":"ClassNode"},{"methods":"boolean hasNext()\nSong next()","x":1510,"name":"Music_iterator","y":870,"attributes":"- private int index;\n- private ArrayList<AudioList> AudioArray; ","id":14,"type":"ClassNode"},{"methods":"void addSong(Song item);\nvoid deleteSong(Integer identifier);\nSong getSong(Integer identifier);\nArrayList<Song> getAllSongs();\nString getTitle();\nvoid changeTitle(String title);\nvoid validateList();","x":1500,"name":"ISongList","y":370,"id":15,"type":"InterfaceNode"},{"methods":"","x":480,"name":"ByLengthComparator","y":770,"attributes":"","id":16,"type":"ClassNode"},{"methods":"void filterByTag(String tagName, String filter);\nvoid songsShorterThan(String t);\nvoid songsLongerThan(String t);\nvoid songsofExactlength(String t);\nvoid titleStartwith(String pattern);\nvoid titleContains(String pattern);","x":1890,"name":"Filterable","y":10,"id":17,"type":"InterfaceNode"},{"methods":"boolean hasNext()\nSong next()","x":1980,"name":"SongIterator<Song>","y":560,"attributes":"- ArrayList<Song> ourList;\n- int index;\n- int size;","id":18,"type":"ClassNode"}],"edges":[{"Generalization Type":"Implementation","start":7,"end":17,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":7,"end":15,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":7,"end":12,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":13,"end":17,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":14,"end":13,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":5,"end":6,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":14,"end":6,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":6,"end":1,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":18,"end":11,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":3,"end":0,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":16,"end":0,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":10,"end":0,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":9,"end":0,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":5,"end":11,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":2,"end":12,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":2,"end":15,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":2,"end":17,"type":"GeneralizationEdge"},{"middleLabel":"","start":13,"directionality":"Unidirectional","end":18,"type":"DependencyEdge"},{"middleLabel":"","start":13,"directionality":"Unidirectional","end":7,"type":"DependencyEdge"},{"middleLabel":"","start":13,"directionality":"Unidirectional","end":2,"type":"DependencyEdge"},{"middleLabel":"","start":13,"directionality":"Unidirectional","end":4,"type":"DependencyEdge"},{"Generalization Type":"Implementation","start":4,"end":0,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":4,"end":12,"type":"GeneralizationEdge"},{"middleLabel":"","start":4,"directionality":"Unidirectional","end":8,"type":"DependencyEdge"}],"version":"3.0.1"}
